const express = require("express")
const webpack = require("webpack")
const webpackDevMiddleware = require("webpack-dev-middleware")
const webpackHotMiddleware = require("webpack-hot-middleware")
const webpackHotServerMiddleware = require("webpack-hot-server-middleware")

const webpackConfig = require("./webpack.config")
const multiCompiler = webpack(webpackConfig)

const app = express()

app.get("/favicon.ico", (req, res) => {
  res.send("no favicon.ico")
})

/**
 * Sets up a static file server that will server the latest assets generated by the webpack build
 */
app.use(webpackDevMiddleware(multiCompiler))

/**
 * Sets up an endpoint that the HMR client knows how to connect to.
 * The endpoint sends the updated modules to the client.
 */
app.use(
  webpackHotMiddleware(
    multiCompiler.compilers.find(compiler => compiler.name === "client")
  )
)

/**
 * A middleware that handles SSR rendering.
 * The middleware will hand the request to the latest middleware generated by compiling the server entry point.
 * This middleware is a catch all.
 */
app.use(webpackHotServerMiddleware(multiCompiler))

const PORT = 8000
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}.`)
})
